// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model for tracking dashboard users
model User {
  id        String   @id @default(cuid())
  address   String   @unique
  tier      String   @default("free") // free, pro, api
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  sessions  Session[]
  alerts    Alert[]
  @@map("users")
}

// Session tracking for rate limiting and analytics
model Session {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())

  @@index([userId])
  @@index([token])
  @@map("sessions")
}

// Alert model for price/funding alerts and new alert types
model Alert {
  id            String   @id @default(cuid())
  userId        String?  @default("default-user") // nullable for now (no auth yet)
  user          User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Alert configuration - ANY asset support
  asset         String   // ANY crypto: BTC, ETH, SOL, DOGE, AVAX, etc.
  baseAsset     String   @default("USDT") // USDT, USDC, USD, BTC, ETH
  type          String   // "price_above" | "price_below" | "volume_spike"
  targetValue   Float
  currentValue  Float?
  
  // Multi-channel notifications
  channels      String[] // ["push", "email", "telegram", "whatsapp"]
  
  // Optional metadata
  name          String?
  notes         String?
  
  // Legacy fields for backwards compatibility
  coin          String?  // "BTC" | "ETH" | "HYPE" | "ALL" or specific asset
  condition     String?  // "above" | "below" | "greater_than"
  value         Float?   // threshold
  side          String?  // "BUY" | "SELL" | "BOTH" for large order alerts
  alertType     String?  // price_above, price_below, funding_rate
  threshold     Float?
  
  // Status and notifications (legacy)
  enabled       Boolean  @default(true)
  isActive      Boolean  @default(true)
  active        Boolean  @default(true)
  browserNotif  Boolean  @default(true)
  emailNotif    Boolean  @default(false)
  webhook       String?
  
  // Tracking
  triggered     Boolean  @default(false)
  triggeredCount Int     @default(0)
  triggeredAt   DateTime?
  lastTriggered DateTime?
  lastChecked   DateTime?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  history       AlertHistory[]

  @@index([userId])
  @@index([asset])
  @@index([coin])
  @@index([active])
  @@index([triggered])
  @@index([enabled])
  @@index([isActive])
  @@map("alerts")
}

// Alert history for tracking triggers
model AlertHistory {
  id              String   @id @default(cuid())
  alertId         String
  alert           Alert    @relation(fields: [alertId], references: [id], onDelete: Cascade)
  asset           String
  baseAsset       String
  type            String
  targetValue     Float
  actualValue     Float
  triggeredAt     DateTime @default(now())
  channels        String[] // All configured channels
  sentChannels    String[] // Successfully sent
  failedChannels  String[] // Failed to send
  
  // Legacy fields
  coin            String?
  price           Float?
  orderSize       Float?
  volume          Float?
  
  @@index([alertId])
  @@index([triggeredAt])
  @@map("alert_history")
}

// Economic calendar events
model EconomicEvent {
  id            String   @id @default(cuid())
  name          String
  country       String
  category      String
  impact        String   // "HIGH" | "MEDIUM" | "LOW"
  eventDate     DateTime
  source        String?
  sourceUrl     String?
  frequency     String?  // "Monthly" | "Quarterly" | "Annually"
  
  // Historical impact data
  btcAvgImpact  Float?   // Average BTC % movement
  ethAvgImpact  Float?   // Average ETH % movement
  spxAvgImpact  Float?   // Average S&P 500 % movement
  volumeSpike   Float?   // Average volume spike %
  
  // Volatility windows
  primaryWindowStart  String?  // HH:MM UTC
  primaryWindowEnd    String?  // HH:MM UTC
  extendedWindowStart String?  // HH:MM UTC
  extendedWindowEnd   String?  // HH:MM UTC
  
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  releases      EventRelease[]
  
  @@index([eventDate])
  @@index([impact])
  @@index([category])
  @@map("economic_events")
}

// Historical releases for economic events
model EventRelease {
  id          String   @id @default(cuid())
  eventId     String
  event       EconomicEvent @relation(fields: [eventId], references: [id], onDelete: Cascade)
  releaseDate DateTime
  sentiment   String?  // "Hawkish" | "Dovish" | "Neutral"
  btcImpact   Float?   // BTC % movement
  ethImpact   Float?   // ETH % movement
  spxImpact   Float?   // S&P 500 % movement
  
  createdAt   DateTime @default(now())
  
  @@index([eventId])
  @@index([releaseDate])
  @@map("event_releases")
}

// Trade snapshot for historical data
model TradeSnapshot {
  id        String   @id @default(cuid())
  asset     String
  price     Float
  size      Float
  side      String   // buy, sell
  timestamp DateTime
  createdAt DateTime @default(now())

  @@index([asset])
  @@index([timestamp])
  @@map("trade_snapshots")
}

// Position snapshot for historical tracking
model PositionSnapshot {
  id           String   @id @default(cuid())
  address      String
  asset        String
  szi          Float
  entryPrice   Float
  unrealizedPnl Float
  timestamp    DateTime
  createdAt    DateTime @default(now())

  @@index([address])
  @@index([asset])
  @@index([timestamp])
  @@map("position_snapshots")
}

// System health metrics
model HealthMetric {
  id        String   @id @default(cuid())
  service   String   // redis, websocket, api, database
  status    String   // healthy, degraded, unhealthy
  latency   Int?
  metadata  Json?
  timestamp DateTime @default(now())

  @@index([service])
  @@index([timestamp])
  @@map("health_metrics")
}

// Trade model for PnL tracking
model Trade {
  id          String   @id @default(cuid())
  userId      String   @default("default-user") // For now, use default
  
  asset       String   // ANY crypto asset
  baseAsset   String   @default("USDT") // "USDT" | "USDC" | "USD" | "BTC" | "ETH"
  type        String   // "long" | "short"
  entryPrice  Float
  exitPrice   Float?   // Nullable for open positions
  size        Float    // amount in asset
  fees        Float    @default(0)
  
  openedAt    DateTime
  closedAt    DateTime? // Nullable for open positions
  
  pnl         Float?   // calculated: (exitPrice - entryPrice) * size for LONG - fees
  pnlPercent  Float?   // calculated: (pnl / (entryPrice * size)) * 100
  
  notes       String?
  status      String   @default("open") // "open" | "closed"
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@index([userId])
  @@index([asset])
  @@index([status])
  @@index([openedAt])
  @@map("trades")
}

// Notification settings for multi-channel alerts
model NotificationSettings {
  id              String   @id @default(cuid())
  userId          String   @unique @default("default-user")
  email           String?
  telegramChatId  String?
  whatsappNumber  String?
  pushEnabled     Boolean  @default(true)
  emailEnabled    Boolean  @default(false)
  telegramEnabled Boolean  @default(false)
  whatsappEnabled Boolean  @default(false)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  @@map("notification_settings")
}

// Whale trade tracking for large trades above thresholds
model WhaleTrade {
  id            String   @id @default(cuid())
  asset         String   // BTC, ETH, SOL, etc.
  side          String   // BUY or SELL
  price         Float
  size          Float    // Amount in asset
  notionalValue Float    // USD value of trade
  category      String   // MEGA_WHALE, WHALE, INSTITUTION, LARGE
  exchange      String   @default("Hyperliquid")
  tradeId       String?  // External trade ID if available
  timestamp     DateTime @default(now())
  priceImpact   Float?   // Price impact percentage
  metadata      Json?    // Additional metadata
  
  createdAt     DateTime @default(now())
  
  @@index([asset])
  @@index([category])
  @@index([timestamp])
  @@index([notionalValue])
  @@map("whale_trades")
}
